#分布式系统的好处：
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！


#创建仓库并提交
初始化一个git仓库，使用git init
添加文件到git仓库，分两步：
    1.使用git add <file>,注意，可反复多次使用，添加多个文件；（实际就是将工作区中的内容提交到版本库中的暂存区）
    2.使用git commit -m <message>，完成提交。（将暂存区中的内容提交到当前分支）

工作区（Working Directory）：相当于某文件夹
版本库（Repository）:1.stage（暂存区）  2.master（Git为我们自动创建的分支）



#删除文件
1.rm xxx.xx
2.git rm xxx.xx ; git commit -m "remove xxx" (确实要从版本库中删除该文件)
	or git checkout -- xxx.xx（删错啦，把误删的恢复到最新版本）	
	(ps:git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。)


#版本穿梭
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用git reset --hard commit_id.
穿梭前，使用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定回到未来的哪个版本。


#中途想要撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


#关联远程库：
	使用命令git remote add origin git@server-name:path/repo-name.git;
	关联后，使用命令git push -u origin master第一次推送master分支所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin mater推送最新修改；



#Problem
	问题1：git push 失败 
		! [rejected]        master -> master (fetch first)
		error: failed to push some refs to 'https://github.com/13etterrnan/learnnote.git'
		hint: Updates were rejected because the remote contains work that you do
		hint: not have locally. This is usually caused by another repository pushing
		hint: to the same ref. You may want to first integrate the remote changes
		hint: (e.g., 'git pull ...') before pushing again.
		hint: See the 'Note about fast-forwards' in 'git push --help' for details.
	解决方案： 从提示可以看出，是由于两者不同步，因此需要先pull，进行合并然后在进行push，
			因此先使用：
						git pull --rebase origin master
			将远程文件同步下来。
			然后再执行推送：
						git push -u origin master


#分支
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>


#解决冲突
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
	用git log --graph命令可以看到分支合并图。